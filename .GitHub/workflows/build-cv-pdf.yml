name: Build CV PDF (Playwright → Commit/PR)

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch für Commit (leer = aktueller Branch)'
        required: false
        default: ''
      index_path:
        description: 'Pfad zur index.html (z.B. index.html oder resume/index.html)'
        required: false
        default: ''
  push:
    paths:
      - "index.html"
      - "resume/index.html"
      - ".github/workflows/build-cv-pdf.yml"

jobs:
  build-pdf:
    runs-on: ubuntu-latest
    permissions:
      contents: write        # für Commit/PR
      pull-requests: write   # für PR-Erstellung
    steps:
      - name: Checkout (volle Historie)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch || github.ref_name }}

      - name: Ermittel Branch & index.html
        id: setup
        run: |
          BRANCH="${{ github.event.inputs.target_branch || github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          # index.html finden/setzen
          if [ -n "${{ github.event.inputs.index_path }}" ]; then
            IDX="${{ github.event.inputs.index_path }}"
          elif [ -f "index.html" ]; then
            IDX="index.html"
          elif [ -f "resume/index.html" ]; then
            IDX="resume/index.html"
          else
            echo "❌ index.html nicht gefunden (weder ./index.html noch ./resume/index.html)."
            exit 1
          fi
          echo "INDEX_PATH=$IDX" >> $GITHUB_ENV
          echo "Verwende Branch: $BRANCH"
          echo "Nutze Datei:    $IDX"

      - name: Node einrichten
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Playwright installieren (Chromium + Deps)
        run: |
          npm init -y
          npm i -D playwright@1.46.1
          npx playwright install --with-deps chromium

      - name: Export-Script schreiben
        run: |
          mkdir -p scripts assets
          cat > scripts/export-pdf.mjs <<'EOF'
          import { chromium } from "playwright";
          import { resolve, join } from "path";
          import fs from "fs";

          const indexPath = process.env.INDEX_PATH || "index.html";
          const fileUrl = "file://" + resolve(indexPath);
          const outDir = resolve("assets");
          const outPath = join(outDir, "Laurin_Huebner_CV.pdf");
          if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

          const browser = await chromium.launch({
            args: [
              "--no-sandbox",
              "--disable-setuid-sandbox",
              "--allow-file-access-from-files",
              "--disable-web-security",
            ],
          });

          try {
            const ctx = await browser.newContext({ colorScheme: "light" });
            const page = await ctx.newPage();

            // Für PDF: Druck-CSS + störende UI ausblenden
            await page.emulateMedia({ media: "print" });
            await page.addStyleTag({ content: `
              .actions, #themeToggle, #pdfAuto { display: none !important; }
              .qrbox img { display: none !important; } /* verhindert externe Fetches im PDF */
            `});

            await page.goto(fileUrl, { waitUntil: "load", timeout: 120000 });

            await page.pdf({
              path: outPath,
              format: "A4",
              printBackground: true,
              margin: { top: "10mm", right: "10mm", bottom: "10mm", left: "10mm" },
            });

            console.log("✅ PDF geschrieben:", outPath);
          } finally {
            await browser.close();
          }
          EOF

      - name: PDF erzeugen
        env:
          INDEX_PATH: ${{ env.INDEX_PATH }}
        run: node scripts/export-pdf.mjs

      - name: PDF als Artifact hochladen
        uses: actions/upload-artifact@v4
        with:
          name: Laurin_Huebner_CV
          path: assets/Laurin_Huebner_CV.pdf

      - name: Versuch: Direkt committen
        id: commit
        continue-on-error: true
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/Laurin_Huebner_CV.pdf || true
          if git diff --cached --quiet; then
            echo "Kein Commit nötig (Datei unverändert)."
            exit 0
          fi
          git commit -m "chore(pdf): rebuild CV PDF"
          git push origin "${BRANCH}"

      - name: Fallback: Pull-Request erstellen (wenn Push blockiert)
        if: steps.commit.outcome == 'failure'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(pdf): rebuild CV PDF"
          branch: pdf-update/${{ github.run_id }}
          title: "PDF aktualisieren"
          body: "Automatisch erzeugte PDF hinzugefügt/aktualisiert."
          add-paths: |
            assets/Laurin_Huebner_CV.pdf
